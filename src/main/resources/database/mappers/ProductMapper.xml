<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace의 이름은 다른 mapper의 namespace와 중복안됨  -->
  <mapper namespace="com.kwan.app.product.ProductDAO">

  	<!-- 쿼리태그 -->
  	<!-- mapper안에서의 id 중복안됨, 다른 mapper안의 id는 상관없음 -->
  	<!-- 메서드명 선호 -->
  	<!-- parameterType: 매개변수의 타입, 풀패키지 -->
  	<!-- resultType: 결과값 타입, 풀패키지 -->
  	<select id="getDetail" parameterType="ProductDTO" resultMap="dtos">
  		<!-- 쿼리작성 -->
  		<!-- ? = #{getter의 이름} -->
  		SELECT I.*, PF.*
  		FROM ITEMS I
  			LEFT JOIN
  			PRODUCTFILES PF
  			ON (I.ITEM_ID = PF.ITEM_ID)
  		WHERE I.ITEM_ID = #{item_id}
  	</select>
  	
  	<resultMap type="ProductDTO" id="dtos">
  		<id column="ITEM_ID" property="item_id"/>
  		<result column="ITEM_NAME" property="item_name"/> 
  		<result column="ITEM_DETAIL" property="item_detail"/>
  		<result column="ITEM_RATE" property="item_rate"/>
  		
  		<collection property="productFileDTOs" javaType="java.util.List" ofType="ProductFileDTO">
  			<id column="FILENUM" property="filenum"/>
  			<result column="FILENAME" property="filename"/>
  			<result column="ORINAME" property="oriname"/>
  		</collection>
  	</resultMap>
  	
  	
  	
  	<select id="getMax" resultType="Long" parameterType="Pager">
  		SELECT COUNT(*)
  		FROM ITEMS
  		<where>
			ITEM_ID > 0
			<choose>
				<when test="kind=='k2'">
				<!-- 타입에 따라 자동으로 홑따옴표 생성제거됨 ex)'%'10'%'-->
					AND ITEM_DETAIL LIKE '%'||#{search}||'%' <!-- 연결연산자 || 사용 -->
				</when>
				<otherwise>
					AND ITEM_NAME LIKE '%'||#{search}||'%'<!-- k2가 아닌 K1, NULL의 값은 비교적 데이터가 짧은 NAME과 비교한다 -->
				</otherwise>
			</choose>
		</where>
  	</select>
  	
  	<!-- ; 생략 -->
  	<select id="getList" resultType="ProductDTO" parameterType="Pager">
  		SELECT * FROM
			(SELECT ROWNUM R,I.* FROM
				(SELECT *
				FROM ITEMS
				<where>
					ITEM_ID > 0
					<choose>
						<when test="kind=='k2'">
						<!-- 타입에 따라 자동으로 홑따옴표 생성제거됨 ex)'%'10'%'-->
							AND ITEM_DETAIL LIKE '%'||#{search}||'%' <!-- 연결연산자 || 사용 -->
						</when>
						<otherwise>
							AND ITEM_NAME LIKE '%'||#{search}||'%'<!-- k2가 아닌 K1, NULL의 값은 비교적 데이터가 짧은 NAME과 비교한다 -->
						</otherwise>
					</choose>
<!-- 					<if test="kind=='k1'">
						AND ITEM_NAME
					</if>
					<if test="kind=='k2'">
						AND ITEM_DETAIL					
					</if> -->
				</where>
				ORDER BY ITEM_ID DESC
				) I
			)
		WHERE R BETWEEN #{startrow} AND #{lastrow}
  	</select>
  	
  	<select id="getNum" resultType="Long">
  		SELECT ITEMS_SEQ.NEXTVAL FROM DUAL
  	</select>
  	
  	<!-- int가 return됨 다른 type 없음 -->
  	<insert id="add" parameterType="ProductDTO">
  	
  		INSERT INTO ITEMS VALUES (#{item_id},#{item_name},#{item_detail},#{item_rate})
  	
  	</insert>
  	
  	<insert id="addFile" parameterType="ProductFileDTO">
  		INSERT INTO PRODUCTFILES VALUES (FILES_SEQ.NEXTVAL,#{item_id},#{filename},#{oriname})
  	</insert>
  	
  	<update id="update" parameterType="ProductDTO">
  		
  		UPDATE ITEMS SET ITEM_NAME=#{item_name},ITEM_DETAIL=#{item_detail},ITEM_RATE=#{item_rate}
  		WHERE ITEM_ID=#{item_id}
  	
  	</update>
  	
  	<delete id="delete" parameterType="ProductDTO">
  		
  		DELETE ITEMS WHERE ITEM_ID = #{item_id}
  		
  	</delete>
  	
  	<insert id="addWish" parameterType="Map">
  		INSERT INTO WISHLIST 
  		VALUES (#{item_id}, #{member_id})
  	</insert>
  	
  	<select id="wishList" parameterType="MemberDTO" resultType="ProductDTO">
  		SELECT I.*, W.*
  		FROM WISHLIST W
  			LEFT JOIN
  			ITEMS I
  			ON (W.ITEM_ID = I.ITEM_ID)
  		WHERE W.MEMBER_ID = #{member_id}
  	</select>
  	
  	<delete id="delWish" parameterType="Map">
  		DELETE WISHLIST
  		WHERE MEMBER_ID = #{member_id}
  		AND ITEM_ID IN
  		<foreach collection="item_id" item="item" open="(" separator="," close=")">
  			#{item}
  		</foreach>
  	</delete>
  </mapper>